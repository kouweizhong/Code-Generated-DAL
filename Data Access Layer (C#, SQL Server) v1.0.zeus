##|TYPE Template
##|UNIQUEID 47862b8e-aa99-41c1-99d8-d0bc72d261a8
##|TITLE Data Access Layer (C#, SQL Server) v1.0
##|NAMESPACE ZacksFiasco.DataAccessLayer.SQLServer2005
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstProcs
Dim cmbProcType
Dim txtSpecialChar
Dim specialChar

Sub setup()
		ui.Width  = 600
		ui.Height = 750
		
		ui.Title = "C# ADO.NET Execute Stored Procedures"
		
		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		ui.AddLabel "lblSchema", "Schema to read procs from:", "Enter the schema the procs are in."
		ui.AddTextBox "txtSchema", "api", "Schema read procs from:"


		' List procs in a listbox
		'ui.AddLabel "lblStoredProcs", "Select Stored Procedures:", "xxx"
		'Set lstProcs = ui.AddListBox ("lstProcs", "Select Stored Procedures:")
		'lstProcs.IsMultiSelect = true
		'lstProcs.Height = 350

		'ui.AddLabel "lblStoredProcFilter", "SP Filter: ",  ""
		'Set txtStoredProcFilter = ui.AddTextBox("txtStoredProcFilter", "", "Filter Stored Procedures that begin with...")
				
		ui.AddLabel "lblNamespace", "Namespace: ",  ""
		ui.AddTextBox "txtNamespace", "MyNamespace.DataAccess", "Namespace for your Data Access Object."
		
		ui.AddLabel "lblClassName", "ClassName: ",  ""
		ui.AddTextBox "txtClassName", "MyDataAccess", "ClassName for your Data Access object"

		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		'cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
		
		'txtStoredProcFilter.AttachEvent "onchange", "txtStoredProcFilter_onchange"
		
		ui.ShowGUI = true
End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		'bindProcedures cmbDatabases.SelectedValue
	End If
End Sub

'Sub bindProcedures(sDatabase)
'	Set db = MyMeta.Databases(sDatabase)
'	lstProcs.BindData(db.Procedures)
'End Sub

'Sub bindProcedures2
'Problems with this event handler: 28 Mar 2007
'1. text box isn't triggering event when text is changed
'2. RemoveAt isn't working on collection. 
'on error resume next 
'STOP 
'	Set cmbDatabases = ui.item("cmbDatabase")
'	Set txtStoredProcFilter = ui.item("txtStoredProcFilter")
'	
'	dim sDatabase
'	sDatabase = cmbDatabases.SelectedText
'	
'	Set db = MyMeta.Databases(sDatabase)
'	Set p = db.Procedures
'	
'	dim length
'	dim filter
'	
'	filter = UCase(txtStoredProcFilter.Text)
'	length = Len(filter)
'	
'	if length > 0 then
'		For i = 0 to p.Count -1
'			if UCase(Left(p.Item(i).Name,length)) = filter then
'				p.RemoveAt i
'				Debug i
'			end if
'		Next
'	end if
'	
'	lstProcs.BindData(p)
'End Sub

' Event Handler
'Sub cmbDatabases_onchange(control)
'	Set cmbDatabases = ui.item("cmbDatabase")
'	bindProcedures cmbDatabases.SelectedText
'	'bindProcedures2
'End Sub

'Sub txtStoredProcFilter_onchange(control)
'	bindProcedures2
'End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE System.Xml.dll%><%#NAMESPACE System.IO,System.Xml,System.Globalization,System.Text,System.Text.RegularExpressions,Dnp.Utils,System.Collections,System.Collections.Generic %><%
// Data Access Layer (C#, SQL Server)
// v1.0
// Zack Moore
// http://zacksfiasco.blogspot.com/
//
// Published under the Microsoft Public License. See source code download for a copy of the license. 
// Copyright 2007 Zack Moore
//
// This script generates a data access layer that takes the form of
// a data access object that wraps all stored procedures in a given schema
//
// The data access object implements IDispose so you sould Dispose of it after each use.
// The data access object is also flagged with DataObject so that Visual Studio will detect it.
// A reference to System.Configuration.DLL is required.
// There is a single constructor that takes the name of a Connection as specified in the config file.
//
// The data access object implements a method for each stored procedure, using the exactly corresponding
// signature. 

public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		string specialChar = "@";//(string)input["txtSpecialChar"];
		string myNamespace = (string)input["txtNamespace"];
		string myClass = (string)input["txtClassName"];
		string mySchema = (string)input["txtSchema"];
		string filename = string.Format("{0}\\{1}.cs",(string)input["txtPath"],myClass);
		
		//Set the Language for our column data types
		//MyMeta.Language = "C#";
		MyMeta.Language = "C# System Types";
		MyMeta.DbTarget = "SqlClient";

		ArrayList procNames = (ArrayList)input["lstProcs"];
		string databaseName = (string)input["cmbDatabase"];
		
		IDatabase database = MyMeta.Databases[databaseName];
		
		List<string> disposeList = new List<string>();
		//System.Diagnostics.Debugger.Launch();
		//System.Diagnostics.Debugger.Break();		
%>using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace <%=myNamespace%>
{
    public class <%=myClass%>: IDisposable
    {
		public <%=myClass%>(string ConnectionName)
		{
			connectionName = ConnectionName;
		}
		
		// private default constructor
		private <%=myClass%>()
		{
		}
		
		string connectionName;
		
		public string ConnectionName
		{
			get { return connectionName; }
		}
	
        SqlConnection con = null;

        SqlConnection Connection
        {
            get
            {
                if(con==null)
                {
                    con = new SqlConnection(ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString);
                    con.Open();
                }

                return con;
            }
        }

        public void Close()
        {
            if(con != null)
            {
                con.Close();
                con.Dispose();
                con = null;
            }
        }

        SqlTransaction transaction = null;

        public void BeginTransaction()
        {
			if(transaction == null)
			{
				transaction = Connection.BeginTransaction();
			}
        }

        public void Rollback()
        {
            try
            {
                if (transaction != null && transaction.Connection.State == ConnectionState.Open)
                {
                    transaction.Rollback();
                    transaction = null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Exception caught while rolling back transaction: " + ex.Message);
            }
        }

        public void Commit()
        {
            transaction.Commit();
            transaction = null;
        }
        
<%
		// Loop through the procs the user selected and generate the procedures
		
		Dictionary<string, DataEntity> entities = new Dictionary<string, DataEntity>();
		
		foreach(IProcedure objProc in database.Procedures)
		//for(int i = 0; i < procNames.Count; i++)
		{
			if(objProc.Schema != mySchema)
			{
				continue;
			}
			
			// extract meta data from procedure
			string commandType = string.Empty;
			string xml = ExtractXml(objProc.ProcedureText);
			Trace("Entity XML = '" + xml + "'");
			
			DataEntity entity = null;
			
			if(string.IsNullOrEmpty(xml) == false)
			{
				entity = ParseXml(xml, objProc.Name, out commandType);
				
				Trace("entity is " + (entity==null?"null":"not null"));
				Trace("entity.Name is " + (entity.Name==null?"null":entity.Name));
				
				if (entity != null)
				{
					if(entities.ContainsKey(entity.Name) == true)
					{
						Trace("merging entities");
						entities[entity.Name].Merge(entity);
					}
					else
					{
						Trace("adding new entities");
						entities.Add(entity.Name, entity);
					}
				}
			}

			Trace("Proc: " + objProc.Name);
			StringBuilder paramList = new StringBuilder();
			StringBuilder paramCallList = new StringBuilder();
			StringBuilder paramCallListRef = new StringBuilder();
			StringBuilder paramCallListRefSet = new StringBuilder();
			bool isFirst = true;
			string subName = CSharpName(objProc.Name);
			ClassType ct;
			string returnValue="void";
			IParameter returnParam=null;
			
			foreach(IParameter param in objProc.Parameters)
			{
				ct = TestType(param.LanguageType);
				
				// I can't seem to be able to read the return value after calling ExecuteReader()
				// so I'm setting the script to leave out the return values for SPs that have result sets
				if(param.Direction == ParamDirection.ReturnValue)
				{
					if(objProc.ResultColumns.Count <= 0)
					{
						if(ct==ClassType.ValueType && param.IsNullable==true)
						{
							returnValue = string.Format("{0}?", param.LanguageType);
						}
						else
						{
							returnValue = param.LanguageType;
						}
						returnParam = param;
					}
				}
				else
				{				
					if(isFirst == false)
					{
						paramList.Append(", ");
						paramCallList.Append(", ");
					}
					else
					{
						isFirst = false;
					}					
					
					switch(param.Direction)
					{
						case ParamDirection.Input:
							paramCallList.Append("Obj.");
							// nothing
							break;
						case ParamDirection.InputOutput:
							paramList.Append("ref ");
							paramCallList.Append("ref ");
							
							if(ct==ClassType.ValueType && param.IsNullable==true)
							{
								paramCallListRef.AppendFormat("{0}? {1} = Obj.{1};",
									param.LanguageType, CSharpName(param.Name));
								paramCallListRefSet.AppendFormat("Obj.{0} = {0};",
									CSharpName(param.Name));
							}
							else
							{
								paramCallListRef.AppendFormat("{0} {1} = Obj.{1};",
									param.LanguageType, CSharpName(param.Name));
								paramCallListRefSet.AppendFormat("Obj.{0} = {0};",
									CSharpName(param.Name));
							}
							
							paramCallListRef.AppendLine();
							paramCallListRefSet.AppendLine();								
							break;
						case ParamDirection.Output:
							//sql server only has OUTPUT params which are INOUT
							goto case ParamDirection.InputOutput;
						default:
							Trace("unknown parameter direction");
							break;
					}
					
					if(ct==ClassType.ValueType && param.IsNullable==true)
					{
						paramList.AppendFormat("{0}? ",param.LanguageType);
					}
					else
					{
						paramList.AppendFormat("{0} ",param.LanguageType);
					}
									
					paramList.AppendFormat("{0}",CSharpName(param.Name));
					paramCallList.Append(CSharpName(param.Name));
				}
			}
			
			if(objProc.ResultColumns.Count > 0)
			{
				if(isFirst==false)
				{
					paramList.Append(", ");
					paramCallList.Append(", ");
				}
				
				paramList.Append("out IDataReader Reader");
				paramCallList.Append("out reader");
			}
			
			disposeList.Add(string.Format("cmd{0}",subName));
			
%>		SqlCommand cmd<%=subName%>=null;

		public <%=returnValue%> <%=subName%>(<%=paramList.ToString()%>)
		{
			SqlCommand cmd = null;
<%			output.tabLevel = 3;

			if(returnParam != null)
			{
				output.autoTabLn(string.Format("{0} rc;",returnParam.LanguageType));
			}
%>
			if(cmd<%=subName%>==null)
			{
				cmd = new SqlCommand("[<%=objProc.Schema%>].[<%=objProc.Name%>]",this.Connection);
				cmd.CommandType = CommandType.StoredProcedure;
				//setup parameters
<%
			string direction = string.Empty;
			output.tabLevel = 4;
			foreach(IParameter param in objProc.Parameters)
			{

				output.autoTabLn(string.Format("cmd.Parameters.Add(\"{0}\", {1});",
					param.Name, param.DbTargetType));

				direction = param.Direction.ToString();
				output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Direction = ParameterDirection.{1};",param.Name, direction));

				output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].IsNullable = {1};",param.Name, param.IsNullable.ToString().ToLower()));

				if(IsNumberType(param.TypeName)==true)
				{
					output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Precision = {1};",param.Name, param.NumericPrecision));
					output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Scale = {1};",param.Name, param.NumericScale));
				}
				
				if(IsTextType(param.TypeName)==true)
				{
					output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Size = {1};",param.Name, param.CharacterMaxLength));
				}
				else if(IsBinaryType(param.TypeName)==true)
				{
					output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Size = {1};",param.Name, param.CharacterOctetLength));
				}
			}
%>
				cmd<%=subName%> = cmd;
			}//end if
			
			cmd = cmd<%=subName%>;
			cmd.Transaction = transaction;
			
			// set param values
<%
			output.tabLevel = 3;
			foreach(IParameter param in objProc.Parameters)
			{
				switch(param.Direction)
				{
					case ParamDirection.Input:
						if(param.IsNullable==true)
						{
							output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Value = ({1}==null?(object)DBNull.Value:(object){1});",
								param.Name, CSharpName(param.Name)));
						}
						else
						{
							output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Value = {1};",
								param.Name, CSharpName(param.Name)));
						}
						break;
					case ParamDirection.InputOutput:
						if(param.IsNullable==true)
						{
							output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Value = ({1}==null?(object)DBNull.Value:(object){1});",
								param.Name, CSharpName(param.Name)));
						}
						else
						{
							output.autoTabLn(string.Format("cmd.Parameters[\"{0}\"].Value = {1};",
								param.Name, CSharpName(param.Name)));
						}
						break;
					case ParamDirection.Output:
						break;
					case ParamDirection.ReturnValue:
						break;
					default:
						Trace("unknown parameter direction");
						break;
				}
			}
%>
			//execute proc
<%
			if(objProc.ResultColumns.Count > 0)
			{
				output.autoTabLn("Reader = cmd.ExecuteReader();");
				//debugging
				// type data isn't being returned for resultsets
				// as of today, 29 Mar 2007, DataTypeName is returning the C# System Type
				// and LanguageType is returning Unknown. It was my understanding that LanguageType should return the system type.
				//foreach(IResultColumn col in objProc.ResultColumns)
				//{
				//	output.autoTabLn("// " + col.LanguageType + " " + col.Name + " DT=" + col.DataType + " DTC=" + col.DataTypeNameComplete + " DTN=" + col.DataTypeName);
				//}
				//end debugging
			}
			else
			{
				output.autoTabLn("cmd.ExecuteNonQuery();");
			}
%>
			//retrieve any output parameters
<%
			foreach(IParameter param in objProc.Parameters)
			{
				switch(param.Direction)
				{
					case ParamDirection.Input:
						break;
					case ParamDirection.InputOutput:
						if(param.IsNullable==true)
						{
%>			if(cmd.Parameters["<%=param.Name%>"].Value == DBNull.Value)
			{
				<%=CSharpName(param.Name)%> = null;
			}
			else
			{
				<%=CSharpName(param.Name)%> = (<%=param.LanguageType%>)cmd.Parameters["<%=param.Name%>"].Value;
			}

<%
						}
						else
						{
%>			<%=CSharpName(param.Name)%> = (<%=param.LanguageType%>)cmd.Parameters["<%=param.Name%>"].Value;

<%
						}
						break;
					case ParamDirection.Output:
						goto case ParamDirection.InputOutput;
						break;
					case ParamDirection.ReturnValue:
						if(objProc.ResultColumns.Count <= 0)
						{
							if(param.IsNullable==true)
							{
%>			if(cmd.Parameters["<%=param.Name%>"].Value == DBNull.Value)
			{
				rc = null;
			}
			else
			{
				rc = (<%=param.LanguageType%>)cmd.Parameters["<%=param.Name%>"].Value;
			}

<%
							}
							else
							{
%>			rc = (<%=param.LanguageType%>)cmd.Parameters["<%=param.Name%>"].Value;

<%
							}
						}
						break;
					default:
						Trace("unknown parameter direction");
						break;
				}
			}
%>

<%
			if(returnParam != null)
			{
				output.autoTabLn("return rc;");
			}
%>		} // end procedure method

<%// add the Select(), Insert(), Update(), or Delete() overload here
//todo: need to put RETURN in IF block
//todo: need to put IDataReader in IF block
			if(entity != null)
			{
				string entityName;
				if(commandType == "Select")
				{
					entityName = "out " + entity.Name;
				}
				else
				{
					entityName = entity.Name;
				}
				
				StringBuilder tabs = new StringBuilder();
				tabs.Append("\n");
				for(int t = 0; t < output.tabLevel; t++)
				{
					tabs.Append("\t");
				}
				
				paramCallListRef.Replace("\n", tabs.ToString());
				paramCallListRefSet.Replace("\n", tabs.ToString());
				
%>
		public <%=returnValue%> <%=commandType%>(<%=entityName%> Obj)
		{
<%
				output.autoTabLn(paramCallListRef.ToString());
				
				if(objProc.ResultColumns.Count > 0)
				{
					output.autoTabLn("IDataReader reader = null;");
				}
				if(returnParam != null) 
				{
					output.autoTab(string.Format("{0} rc = ", returnValue));
				}%><%=subName%>(<%=paramCallList.ToString()%>);
<%				output.autoTabLn(paramCallListRefSet.ToString());
				
				if(returnParam != null)
				{
					output.autoTabLn("return rc;");
				}
%>
		}

<%
			}
		}	
%>
		#region IDisposable Members

        public void Dispose()
        {
            //dispose of each cmd object and call close
<%
			foreach(string d in disposeList)
			{
				output.tabLevel = 3;
				output.autoTabLn(string.Format("if({0} != null)",d));
				output.autoTabLn("{");
				output.tabLevel = 4;
				output.autoTabLn(string.Format("{0}.Dispose();",d));
				output.autoTabLn(string.Format("{0} = null;",d));
				output.tabLevel = 3;
				output.autoTabLn("}");
			}
			
%>			
            Close();
        }

        #endregion

	}
<%
	
		foreach(KeyValuePair<string, DataEntity> kve in entities)
		{
			DataEntity e = kve.Value;
			
%>
	public class <%=e.Name%>
	{
		//todo: add constructor that takes IDataReader
		
<%			foreach(KeyValuePair<string, Field> kvf in e.Fields)
			{
				Field f = kvf.Value;
				
%>		<%=f.Type%> <%=CamelCase(f.Name)%>;
		
		public <%=f.Type%> <%=e.Name%>
		{
			get { return this.<%=CamelCase(f.Name)%>; }
			set { this.<%=CamelCase(f.Name)%> = value; }
		}

<%
			}// end foreach(Field)
%>
	}
<%
		}// end foreach(Entity)
%>
}//end namespace
<%
		
		//System.Diagnostics.Debugger.Launch();
		//System.Diagnostics.Debugger.Break();
		
		// Save this set of procedures to disk
		output.save(filename, false);
	}
	
	ClassType TestType(string TypeString)
	{
		Type t = Type.GetType(TypeString);
		ClassType rc;
		
		if(t == null)
		{
			rc = ClassType.UnknownType;
		}
		else if(t.IsClass)
		{
			rc = ClassType.ClassType;
		}
		else
		{
			rc = ClassType.ValueType;
		}

		//System.Diagnostics.Debugger.Break();
		//Trace(string.Format("TypeString={0} ClassType={1} Type={2}", TypeString, rc.ToString(), (t==null?"null":t.ToString()) ));
		return rc;
	}

	public void Trace(object Obj)
	{
		Trace(Obj.ToString());
	}
	
	public void Trace(string Msg)
	{
		System.Diagnostics.Debug.WriteLine(string.Format("{0}: {1}",DateTime.Now.ToString(),Msg));
	}
	
	public bool IsNumberType(string TypeName)
	{
		bool rc = false;
		string c = TypeName.ToUpper();
		
		if(c=="BIGINT" || c=="DECIMAL" || c=="FLOAT" || c=="INT" || c=="MONEY" || c=="NUMERIC" ||
			c=="REAL" || c=="SMALLINT" || c=="SMALLMONEY" || c=="TINYINT")
		{
			rc = true;
		}
		
		return rc;
	}
	
	// strings, binary arrays
	public bool IsTextType(string TypeName)
	{
		bool rc = false;
		string c = TypeName.ToUpper();
		
		if(c == "CHAR" || c == "NCHAR" || c == "NTEXT" || 
			c == "NVARCHAR" || c == "TEXT" || c == "VARCHAR")
		{
			rc = true;
		}
		
		return rc;
	}
	
		// strings, binary arrays
	public bool IsBinaryType(string TypeName)
	{
		bool rc = false;
		string c = TypeName.ToUpper();
		
		if(c == "BINARY" || c == "IMAGE" || c == "VARBINARY" || c == "TIMESTAMP")
		{
			rc = true;
		}
		
		return rc;
	}
	
	string specialChar = "@";
	
	public string CSharpName(string SqlParamName)
	{
		string rc = SqlParamName.Replace(specialChar,"");
		rc = rc.Replace(" ","_");
		return rc;
	}
	
	public string CamelCase(string Name)
	{
		string rc = CSharpName(Name);
		return string.Format("{0}{1}", char.ToLower(rc[0]), rc.Substring(1));
	}
	
	public string PascalCase(string Name)
	{
		string rc = CSharpName(Name);
		return string.Format("{0}{1}", char.ToUpper(rc[0]), rc.Substring(1));
	}
	
	public string GenerateEntityName(IProcedure objProc)
	{
		string rc = string.Empty;
		string mod = string.Empty;
		
		rc = objProc.Name;
		int i;
		
		i = rc.IndexOf("Select");
		if(i <= -1)
		{
			i = rc.IndexOf("Search");
		}
		
		if (i > -1)
		{
			string tmp = rc.Substring(i);
			if(rc.Contains("Details") == true)
			{
				mod += "Details";
			}
			
			rc = string.Format("{0}{1}", rc.Substring(0, i), mod);
		}
		else
		{
			rc = rc.Replace("Update","");
			rc = rc.Replace("Delete","");
			rc = rc.Replace("Insert","");		
		}
		
		Trace("GenerateEntityName(\""+objProc.Name+"\") => " + rc);
		
		return rc;
	}
	
	
	DataEntity ParseXml(string XmlFragment, string ProcedureName, out string CommandType)
	{
        CommandType = string.Empty;
		DataEntity rc = null;
		try
		{
			StringReader sr = new StringReader(XmlFragment);

			XmlReaderSettings settings = new XmlReaderSettings();
			settings.ConformanceLevel = ConformanceLevel.Fragment;

			using (XmlReader reader = XmlReader.Create(sr, settings))
			{
				while (reader.Read())
				{
					switch (reader.NodeType)
					{
					case XmlNodeType.Element:
						switch(reader.Name)
						{
							case "MetaData":
								// read attributes
								string entityName = string.Empty; ;
								string commandType = string.Empty; ;

								if (reader.MoveToFirstAttribute() == true)
								{
									do
									{
										switch (reader.Name)
										{
											case "entityName":
												entityName = reader.Value;
												break;
											case "commandType":
												commandType = reader.Value;
												break;
										}
									} while (reader.MoveToNextAttribute());
									reader.MoveToElement();
								}

								rc = new DataEntity(entityName);
								switch(commandType)
								{
									case "Select":
										rc.SelectCommands.Add(ProcedureName);
										break;
									case "Insert":
										rc.InsertCommands.Add(ProcedureName);
										break;
									case "Update":
										rc.UpdateCommands.Add(ProcedureName);
										break;
									case "Delete":
										rc.DeleteCommands.Add(ProcedureName);
										break;
								}
								
								CommandType = commandType;
								
								break;
							case "Key":
								string keyName = reader.ReadElementString();
								Field f = new Field(keyName);
								f.IsKey = true;
								f.IsNullable = false;
								rc.Fields.Add(keyName, f);
								break;
						}
						break;
					}
				}
			}
		}
		catch(Exception ex)
		{
			Trace("Exception: ParseXml('"+ XmlFragment + "', '" + ProcedureName + "') => " + ex.ToString());
		}
		return rc;
	}

	string ExtractXml(string StoredProcedureText)
	{
		string xml = string.Empty;

		if (StoredProcedureText.Contains("<MetaData") == true)
		{
			int MetaDataStart = StoredProcedureText.IndexOf("<MetaData");
			int MetaDataEnd = StoredProcedureText.IndexOf("</MetaData>");
			if (MetaDataEnd > -1)
			{
				MetaDataEnd += 11;
			}
			else
			{
				// if we didn't find </MetaData>, then look for />
				MetaDataEnd = StoredProcedureText.IndexOf("/>");
				if (MetaDataEnd > -1 && MetaDataEnd > MetaDataStart)
				{
					MetaDataEnd += 2;
				}
			}

			if (MetaDataStart > -1 && MetaDataEnd > MetaDataStart)
			{
				xml = StoredProcedureText.Substring(MetaDataStart, MetaDataEnd - MetaDataStart);
			}
		}

		return xml;
	}
}

public enum ClassType
{
	UnknownType,
	ClassType,
	ValueType
}

public class DataEntity
{
	public DataEntity(string Name)
	{
		name = Name;
	}

	DataEntity()
	{
	}

	string name;

	public string Name
	{
		get { return name; }
	}

	Dictionary<string, Field> fields = new Dictionary<string, Field>();

	public Dictionary<string, Field> Fields
	{
		get { return fields; }
	}

	//public override int GetHashCode()
	//{
	//    //int rc = name.GetHashCode();
	//    //unchecked
	//    //{
	//    //    foreach (KeyValuePair<string, Field> kv in fields)
	//    //    {
	//    //        rc += kv.Key.GetHashCode() * kv.Value.GetHashCode();
	//    //    }
	//    //}
	//    //return rc;
	//    return name.GetHashCode();
	//}

	//todo: nee do add lists of Select, Insert, Update, Delete methods
	// data needs to be what you would need to map from Data Object to method call
	
	List<string> selectCommands = new List<string>();
	
	public List<string> SelectCommands
	{
		get{ return selectCommands; }
	}

	List<string> insertCommands = new List<string>();
	
	public List<string> InsertCommands
	{
		get{ return insertCommands; }
	}

	List<string> updateCommands = new List<string>();
	
	public List<string> UpdateCommands
	{
		get{ return updateCommands; }
	}

	List<string> deleteCommands = new List<string>();
	
	public List<string> DeleteCommands
	{
		get{ return deleteCommands; }
	}

	public void Merge(DataEntity rh)
	{
		if (name == rh.Name)
		{
			foreach (KeyValuePair<string, Field> kv in rh.Fields)
			{
				// check to see if key is in local fields
				if (this.fields.ContainsKey(kv.Key) == false)
				{
					fields.Add(kv.Key, kv.Value);
				}
			}
		}
	}
}

public class Field
{
	public Field(string Name)
	{
		name = Name;
	}

	Field()
	{
	}

	string name;

	public string Name
	{
		get { return name; }
	}

	string type;

	public string Type
	{
		get { return type; }
		set { type = value; }
	}

	bool isKey = false;

	public bool IsKey
	{
		get { return isKey; }
		set { isKey = value; }
	}

	bool isNullable = false;

	public bool IsNullable
	{
		get { return isNullable; }
		set { isNullable = value; }
	}

	ClassType classType = ClassType.UnknownType;

	public ClassType ClassType
	{
		get { return classType; }
		set { classType = value; }
	}

	//public override int GetHashCode()
	//{
	//    //int rc = name.GetHashCode();
	//    //unchecked
	//    //{
	//    //    rc = (rc * type.GetHashCode()) + Convert.ToInt32(isKey) + Convert.ToInt32(isNullable);
	//    //}
	//    //return rc;
	//    return name.GetHashCode();
	//}
}



%>
##|BODY_END
